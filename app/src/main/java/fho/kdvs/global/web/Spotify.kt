package fho.kdvs.global.web

import android.util.Base64
import fho.kdvs.global.database.TrackEntity
import fho.kdvs.global.extensions.urlEncoded
import fho.kdvs.global.util.HttpHelper
import fho.kdvs.global.util.Keys.SPOTIFY_CLIENT_ID
import fho.kdvs.global.util.Keys.SPOTIFY_CLIENT_SECRET
import fho.kdvs.global.util.URLs.SPOTIFY_GET_USER_PROFILE_URL
import fho.kdvs.global.util.URLs.SPOTIFY_SEARCH_URL
import fho.kdvs.global.util.URLs.SPOTIFY_TOKEN_URL
import fho.kdvs.global.util.URLs.spotifyCreatePlaylist
import kotlinx.serialization.json.Json
import org.json.JSONObject
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.util.LinkedMultiValueMap
import timber.log.Timber


@kotlinx.serialization.UnstableDefault
object Spotify {
    // Client Credentials Flow
    fun search(query: String?): SpotifyData? { // TODO: fuzzy/dynamic search?
        Timber.d("Spotify search $query")

        try {
            val authentication = requestAuthentication()
            if (authentication != null && authentication.has("access_token")) {
                val token = authentication.getString("access_token")

                val headers = HttpHeaders()
                headers.set("Authorization", "Bearer $token")

                val url = "$SPOTIFY_SEARCH_URL$query"
                val request = HttpEntity<String>(headers)

                val response = HttpHelper.makeParameterizedGETRequest(url, request)
                response?.let {
                    return Json.nonstrict.parse(SpotifyData.serializer(), response)
                }
            }
        } catch (e: Exception) {
            Timber.d("GET error $e")
        }

        return null
    }

    /** Create Spotify playlist with specified title and return uri if creation was successful. */
    fun createPlaylist(title: String): String? {
        Timber.d("Creating Spotify playlist: $title")

        try {
            val authentication = requestAuthentication()
            if (authentication != null && authentication.has("access_token")) {
                val token = authentication.getString("access_token")

                val headers = HttpHeaders()
                headers.set("Authorization", "Bearer $token")

                val request = HttpEntity<String>(headers)

                val id = getCurrentUserSpotifyID(request)

                if (!id.isNullOrBlank()) {
                    val url = spotifyCreatePlaylist(id)

                    val desc = "Generated by KDVS App on Android."

                    val body = "{\"name\":\"$title\", \"public\":true, \"description\":$desc}"

                    val createRequest = HttpEntity<String>(body, headers)

                    val response = HttpHelper.makeParameterizedGETRequest(url, createRequest)

                    // TODO replace with retrofit
                    response?.let {
                        val capture = "\"uri\": \"spotify:user:.*:playlist:.*\"".toRegex()
                            .find(it)

                        return capture?.groupValues?.firstOrNull()
                    }
                }
            }
        } catch (e: Exception) {
            Timber.d("GET error $e")
        }

        return null
    }

    fun addTracksToPlaylist(tracks: List<TrackEntity>?, playlistUri: String) {

    }

    fun getAlbumQuery(album: String?, artist: String?): String? {
        return "album:${album.encode()} artist:${artist.encode()}&type=album&limit=1"
    }

    fun getTrackQuery(song: String?, artist: String?): String? {
        return ("track:${song.encode()} "
                + "artist:${artist.encode()}&type=track&limit=1")
    }

    private fun requestAuthentication(): JSONObject? {
        Timber.d("Requesting Spotify authentication")

        val body = LinkedMultiValueMap<String, String>()
        body.add("grant_type", "client_credentials")

        val encoded = Base64.encodeToString(
            "$SPOTIFY_CLIENT_ID:$SPOTIFY_CLIENT_SECRET".toByteArray(),
            Base64.NO_WRAP
        )

        val headers = HttpHeaders()
        headers.set("Authorization", "Basic $encoded")
        headers.contentType = MediaType.APPLICATION_FORM_URLENCODED

        val request = HttpEntity(body, headers)
        return JSONObject(HttpHelper.makePOSTRequest(SPOTIFY_TOKEN_URL, request))
    }

    private fun getCurrentUserSpotifyID(request: HttpEntity<String>): String? {
        val url = SPOTIFY_GET_USER_PROFILE_URL

        // TODO replace with retrofit
        val response = HttpHelper.makeParameterizedGETRequest(url, request)
        response?.let {
            val capture = "\"id\":\"(.+)\"".toRegex().find(it)

            return capture?.groupValues?.firstOrNull()
        }

        return null
    }

    private fun String?.encode(): String {
        return this.urlEncoded
            .replace("+", " ")
    }
}